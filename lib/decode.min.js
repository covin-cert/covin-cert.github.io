!(function (e) {
  "function" == typeof define && define.amd ? define(e) : e();
})(function () {
  "use strict";
  function a(e) {
    this.message = e;
  }
  (a.prototype = new Error()).name = "InvalidCharacterError";
  var t =
    ("undefined" != typeof window && window.atob && window.atob.bind(window)) ||
    function (e) {
      var n = String(e).replace(/=+$/, "");
      if (n.length % 4 == 1)
        throw new a(
          "'atob' failed: The string to be decoded is not correctly encoded."
        );
      for (
        var t, r, o = 0, i = 0, d = "";
        (r = n.charAt(i++));
        ~r &&
        ((t = o % 4 ? 64 * t + r : r), o++ % 4) &&
        (d += String.fromCharCode(255 & (t >> ((-2 * o) & 6))))
      )
        r =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(
            r
          );
      return d;
    };
  function r(e) {
    var n = e.replace(/-/g, "+").replace(/_/g, "/");
    switch (n.length % 4) {
      case 0:
        break;
      case 2:
        n += "==";
        break;
      case 3:
        n += "=";
        break;
      default:
        throw "Illegal base64url string!";
    }
    try {
      return decodeURIComponent(
        t(n).replace(/(.)/g, function (e, n) {
          n = n.charCodeAt(0).toString(16).toUpperCase();
          return n.length < 2 && (n = "0" + n), "%" + n;
        })
      );
    } catch (e) {
      return t(n);
    }
  }
  function o(e) {
    this.message = e;
  }
  function e(e, n) {
    if ("string" != typeof e) throw new o("Invalid token specified");
    var t = !0 === (n = n || {}).header ? 0 : 1;
    try {
      return JSON.parse(r(e.split(".")[t]));
    } catch (e) {
      throw new o("Invalid token specified: " + e.message);
    }
  }
  ((o.prototype = new Error()).name = "InvalidTokenError"),
    window &&
      ("function" == typeof window.define && window.define.amd
        ? window.define("jwt_decode", function () {
            return e;
          })
        : window && (window.jwt_decode = e));
});
