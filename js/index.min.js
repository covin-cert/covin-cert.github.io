var alertPlaceholder = document.getElementById("liveAlert"),
  mobileNumberDiv = document.getElementById("validationCustom01"),
  otpDiv = document.getElementById("validationCustom02"),
  mobileInputForm = document.getElementById("mobileInputForm"),
  otpInputForm = document.getElementById("otpInputForm"),
  getMyCertificate = document.getElementById("getMyCertificate"),
  logOut = document.getElementById("logOut");
function storeData(e, t) {
  "undefined" != typeof Storage && sessionStorage.setItem(e, t);
}
function getData(e) {
  return "undefined" != typeof Storage ? sessionStorage.getItem(e) : null;
}
function alert(e, t) {
  var a = document.createElement("div");
  (a.innerHTML =
    '<div class="alert alert-' +
    t +
    ' alert-dismissible" role="alert">' +
    e +
    '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>'),
    (alertPlaceholder.innerHTML = ""),
    alertPlaceholder.append(a);
}
async function encode(e) {
  (e = new TextEncoder().encode(e)),
    (e = await crypto.subtle.digest("SHA-256", e));
  const t = Array.from(new Uint8Array(e));
  return t.map((e) => e.toString(16).padStart(2, "0")).join("");
}
async function downloadCertificate(e) {
  var t = getData("token"),
    { beneficiary_reference_id: a } = jwt_decode(t),
    t = await axios({
      method: "get",
      url: "https://cdn-api.co-vin.in/api/v2/registration/certificate/public/download",
      params: { beneficiary_reference_id: a },
      headers: {
        "Content-Type": "application/json",
        Accept: "application/pdf",
        Authorization: "Bearer " + t,
      },
      responseType: "arraybuffer",
    }),
    t = window.URL.createObjectURL(new Blob([t.data]));
  const n = document.createElement("a");
  (n.href = t),
    n.setAttribute("download", "Certificate.pdf"),
    document.body.appendChild(n),
    n.click();
}
async function logMeOut() {
  await storeData("token", null),
    await storeData("mobile", null),
    (alertPlaceholder.innerHTML = ""),
    (mobileInputForm.style.display = "block"),
    (otpInputForm.style.display = "none"),
    (getMyCertificate.style.display = "none"),
    (logOut.style.display = "none");
}
async function verifyOtp(e) {
  try {
    var t = getData("txnId"),
      a = await encode(e);
    return (
      storeData(
        "token",
        (
          await axios({
            method: "post",
            url: "https://cdn-api.co-vin.in/api/v2/auth/public/confirmOTP",
            data: { otp: a, txnId: t },
          })
        ).data.token
      ),
      alert("User has been successfully verified !!", "success"),
      (getMyCertificate.style.display = "block"),
      (logOut.style.display = "block"),
      !0
    );
  } catch (e) {
    var { status: n } = e.response || {};
    return (
      401 == n
        ? alert("Invalid OTP", "error")
        : alert("Verification error", "warning"),
      (mobileInputForm.style.display = "none"),
      (otpInputForm.style.display = "block"),
      null
    );
  }
}
async function sendOtp(e) {
  try {
    return (
      storeData("mobile", e),
      storeData(
        "txnId",
        (
          await axios({
            method: "post",
            url: "https://cdn-api.co-vin.in/api/v2/auth/public/generateOTP",
            data: { mobile: e },
          })
        ).data.txnId
      ),
      alert("OTP has been sent to your mobile number!", "success"),
      (mobileInputForm.style.display = "none"),
      (otpInputForm.style.display = "block"),
      !0
    );
  } catch (e) {
    var { status: t } = e.response || {};
    return 400 == t
      ? (alert("OTP Already sent", "info"),
        (mobileInputForm.style.display = "none"),
        (otpInputForm.style.display = "block"),
        !0)
      : (alert("Unable to generate OTP", "info"), null);
  }
}
!(function () {
  "use strict";
  mobileInputForm.addEventListener(
    "submit",
    function (e) {
      if (
        (e.preventDefault(),
        e.stopPropagation(),
        mobileInputForm.checkValidity())
      ) {
        e = mobileNumberDiv.value;
        if (isNaN(e) || 10 !== e.length)
          return (
            alert("Please type a valid mobile number!", "warning"),
            void mobileInputForm.classList.remove("was-validated")
          );
        sendOtp(parseInt(e)), mobileInputForm.classList.add("was-validated");
      } else
        alert("Please type a valid mobile number!", "warning"),
          mobileInputForm.classList.remove("was-validated");
    },
    !1
  ),
    otpInputForm.addEventListener(
      "submit",
      function (e) {
        if (
          (e.preventDefault(),
          e.stopPropagation(),
          otpInputForm.checkValidity())
        ) {
          e = otpDiv.value;
          if (isNaN(e) || 6 !== e.length)
            return (
              alert("Please type a valid OTP!", "warning"),
              void otpInputForm.classList.remove("was-validated")
            );
          verifyOtp(parseInt(e)),
            otpInputForm.classList.add("was-validated"),
            (mobileInputForm.style.display = "none"),
            (otpInputForm.style.display = "none");
        } else
          alert("Please type a valid OTP!", "warning"),
            otpInputForm.classList.remove("was-validated");
      },
      !1
    ),
    getMyCertificate.addEventListener("click", downloadCertificate),
    logOut.addEventListener("click", logMeOut);
})(),
  logMeOut();
